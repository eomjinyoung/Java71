* 모델링?
- 머리 속에 생각하는 바를 글과 그림으로 표현하는 것.

[DB 모델링]
- 애플리케이션에 다룰 데이터를 엔티티와 컬럼, 관계로 표현하는 것.
- 목적: 
    1) 중복을 제거 
       -> 데이터의 신뢰성을 높이기 위함.
       -> 메모리 낭비가 줄어듦.
    2) 글과 그림으로 표현 
       -> 데이터 구조 파악을 쉽게 한다.
       -> 고객 및 개발자 간에 의사 소통을 돕는다. 
- 방법
1. 엔티티(테이블) 식별 및 속성(컬럼) 식별 
  -> 요구사항 명세서를 통해 시스템이 다뤄야할 데이터를 식별한다.
2. 데이터 식별자(primary key)를 선언 
  -> 모든 엔티티는 반드시 식별자를 가져야 한다.
  -> 각 엔티티의 데이터를 구분할 때 사용할 식별자를 고른다.
  -> 한 개 이상의 컬럼으로 구성된다.
  예) 
  제품명, 주문자, 잔여수량, 주문수량,주문자전화번호
  제품명,주문자전화번호,주문수량,주문일
  ...
  => 주문 정보를 구분하기 위해 여러 개의 컬럼 값을 비교하는 것은 
       실행 속도를 저하시킨다.
  => 최소의 컬럼 값으로 데이터를 식별하는 것이 좋다.
  => 한 두 개의 컬럼 값으로 구분할 수 있다면 그 컬럼들을 식별자로 선언한다.
  => 주문 정보처럼 한 두 개의 컬럼 값으로 데이터를 구분할 수 없다면,
      임의의 컬럼을 만들어 식별자로 사용하라!
      
3. 정규화
  -> 중복 데이터 제거한다.   
    1) 제1정규화
       -> 컬럼의 개 수가 가변 적인 경우 및 중복 데이터 분리
       -> 별도의 테이블을 만들어 부모 자식 관계를 맺는다.
    2) 제2정규화
       -> PK가 여러 컬럼으로 이루어져 있을 경우,
           모든 일반 컬럼은 PK 컬럼 모두에 종속되어야 한다.
       -> 별도의 테이블을 만들어 부모 자식 관계를 맺는다.
    3) 제3정규화
       -> PK에 종속되지 않고 오히려 다른 일반 컬럼에 종속되는 컬럼을 분리한다.
       -> 별도의 테이블을 만들어 부모 자식 관계를 맺는다.
       예) 기본 주소는 우편 번호에 종속된다.
       예) 제품가격과 제조일, 잔여수량은 제품명에 종속된다.
* 관계
- 부모 테이블 : 자식 테이블 쪽에서 참조한다.
- 보통 "일 대 다"의 관계를 갖는다.
- 만약 "다 대 다"의 관계를 갖는다면
  두 테이블 중간에 새 테이블(관계 테이블)을 만들고,
  기존 테이블과 새로 만든 테이블을 "일 대 다"의 관계로 만든다.      

* 외부 키(foreign key)
- 부모 테이블의 PK를 참조하는 자식 테이블 쪽의 컬럼.

* 비식별 관계(non-identifying relational)
- 외부키 컬럼이 그 테이블에서 일반 컬럼일 때.

* 식별 관계(identifying relational)
- 외부키 컬럼이 그 테이블에서 식별자로 사용될 때.       
       
* 관계 
- 1 : 0 이상
- 1 : 1 이상
- 1 : 0 또는 1
- 1 : 1   

4. 후보 키(candidate key)를 식별한다.
  -> 중복 되지 말아야 할 컬럼.
  -> 후보 키도 주 키로 사용할 수 있기 때문에 중복 입력이 되지 않도록 
      Unique로 선언한다.
      
5. 인덱스 컬럼을 식별한다. 
  -> 검색 조건으로 사용될 컬럼을 식별한다.
  -> 인덱스 컬럼으로 지정하면, DBMS는 인덱스 컬럼 값을 별도의 테이블로 만들어 관리한다.

6. 논리 모델을 물리 모델로 전환
  -> 테이블 및 컬럼 이름을 영어로 만든다.
  -> 영어로 된 이름은 약어로 표현한다.
     예) FST_NM

7. NULL 여부 및 기본 값 지정
  -> 필수 입력 컬럼을 지정한다.
  -> 값이 생략될 때 들어갈 기본 값을 지정한다.
  
6. 도메인 식별 및 적용
  -> 유사 용도의 컬럼을 그룹을 묶어 도메인으로 선언한다.
  -> 컬럼들의 타입과 크기를 일관성 있게 관리할 수 있다.
  
7. 포워드 엔지니어링
  -> DB 모델링 정보를 가지고 실제 DBMS의 SQL을 생성하는 것.
  -> 리버스 엔지니어링
      => DBMS의 테이블 정보를 가지고 DB 모델링을 뽑아내는 것.
 















 









    
    
    
    
    
